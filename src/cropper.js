// Cropping Tool
// This script is generated by GPT-4.1 by giving different prompts to generate the cropping tool.
function createCropper(inputId, previewId, cropBtnId, fileName, cropContainerId) {
  const input = document.getElementById(inputId);
  const preview = document.getElementById(previewId);
  const cropContainer = document.getElementById(cropContainerId);
  let cropBtn = null, cropCanvas = null, cropCtx = null, cropRect = null;
  let dragging = false, resizing = false;
  let dragOffset = {x:0, y:0}, resizeStart = {x:0, y:0, size:0};
  let img = null, imgFile = null;
  let dynamicHandleSize = 10, cropBoxLineWidth = 2;
  const HANDLE_SIZE = 20;

  function showCropCanvas(image, file) {
    if (cropCanvas) cropCanvas.remove();
    if (cropBtn) cropBtn.remove();
    cropCanvas = document.createElement('canvas');
    const maxDim = 320;
    let scale = 1;
    if (image.width > maxDim || image.height > maxDim) {
      scale = Math.min(maxDim / image.width, maxDim / image.height);
    }
    cropCanvas.width = image.width;
    cropCanvas.height = image.height;
    cropCanvas.style.display = 'block';
    cropCanvas.style.maxWidth = (image.width * scale) + 'px';
    cropCanvas.style.maxHeight = (image.height * scale) + 'px';
    cropCanvas.style.margin = '0 auto';
    cropCanvas.style.borderRadius = '10px';
    cropCanvas.style.cursor = 'move';
    cropCanvas.style.background = '#f4f7fa';
    cropCanvas.style.boxShadow = '0 2px 12px rgba(0,0,0,0.08)';
    cropCtx = cropCanvas.getContext('2d');
    cropContainer.innerHTML = '';
    cropContainer.style.display = 'flex';
    cropContainer.style.flexDirection = 'column';
    cropContainer.style.alignItems = 'center';
    cropContainer.appendChild(cropCanvas);

    const minSide = Math.min(image.width, image.height);
    cropRect = {
      x: Math.floor((image.width - minSide) / 2),
      y: Math.floor((image.height - minSide) / 2),
      size: minSide
    };
    dynamicHandleSize = Math.max(8, Math.round(minSide * 0.04));
    cropBoxLineWidth = Math.max(2, Math.round(minSide * 0.012));
    drawCrop();

    function getHandleAt(x, y) {
      const side = cropRect.size / 4;
      const handles = [
        {hx: cropRect.x, hy: cropRect.y},
        {hx: cropRect.x + cropRect.size, hy: cropRect.y},
        {hx: cropRect.x + cropRect.size, hy: cropRect.y + cropRect.size},
        {hx: cropRect.x, hy: cropRect.y + cropRect.size}
      ];
      for (let i = 0; i < 4; ++i) {
        if (
          x >= handles[i].hx - side/2 && x <= handles[i].hx + side/2 &&
          y >= handles[i].hy - side/2 && y <= handles[i].hy + side/2
        ) return i;
      }
      return -1;
    }

    let activeHandle = -1;

    cropCanvas.onmousedown = function(e) {
      e.preventDefault();
      const rect = cropCanvas.getBoundingClientRect();
      const x = (e.clientX - rect.left) * (image.width / cropCanvas.offsetWidth);
      const y = (e.clientY - rect.top) * (image.height / cropCanvas.offsetHeight);
      activeHandle = getHandleAt(x, y);
      if (activeHandle !== -1) {
        resizing = true;
        resizeStart.x = x;
        resizeStart.y = y;
        resizeStart.size = cropRect.size;
        resizeStart.rect = {...cropRect};
        resizeStart.handle = activeHandle;
      } else if (
        x >= cropRect.x && x <= cropRect.x + cropRect.size &&
        y >= cropRect.y && y <= cropRect.y + cropRect.size
      ) {
        dragging = true;
        dragOffset.x = x - cropRect.x;
        dragOffset.y = y - cropRect.y;
      }
    };
    cropCanvas.onmousemove = function(e) {
      const rect = cropCanvas.getBoundingClientRect();
      const x = (e.clientX - rect.left) * (image.width / cropCanvas.offsetWidth);
      const y = (e.clientY - rect.top) * (image.height / cropCanvas.offsetHeight);

      let handleIdx = getHandleAt(x, y);
      if (handleIdx !== -1 || resizing) {
        cropCanvas.style.cursor = 'nwse-resize';
      } else if (
        x >= cropRect.x && x <= cropRect.x + cropRect.size &&
        y >= cropRect.y && y <= cropRect.y + cropRect.size
      ) {
        cropCanvas.style.cursor = 'move';
      } else {
        cropCanvas.style.cursor = 'default';
      }

      if (dragging) {
        e.preventDefault();
        let nx = x - dragOffset.x;
        let ny = y - dragOffset.y;
        nx = Math.max(0, Math.min(nx, image.width - cropRect.size));
        ny = Math.max(0, Math.min(ny, image.height - cropRect.size));
        cropRect.x = nx;
        cropRect.y = ny;
        drawCrop();
      } else if (resizing) {
        e.preventDefault();
        let dx = x - resizeStart.x;
        let dy = y - resizeStart.y;
        let newRect = {...resizeStart.rect};
        switch (resizeStart.handle) {
          case 0:
            let br_x = resizeStart.rect.x + resizeStart.rect.size;
            let br_y = resizeStart.rect.y + resizeStart.rect.size;
            let new_x = Math.min(br_x - 32, Math.max(0, resizeStart.rect.x + dx));
            let new_y = Math.min(br_y - 32, Math.max(0, resizeStart.rect.y + dy));
            let new_size = Math.min(br_x - new_x, br_y - new_y);
            newRect.x = br_x - new_size;
            newRect.y = br_y - new_size;
            newRect.size = new_size;
            break;
          case 1:
            let bl_x = resizeStart.rect.x;
            let bl_y = resizeStart.rect.y + resizeStart.rect.size;
            let new_tr_x = Math.max(bl_x + 32, Math.min(image.width, resizeStart.rect.x + resizeStart.rect.size + dx));
            let new_tr_y = Math.min(bl_y - 32, Math.max(0, resizeStart.rect.y + dy));
            let new_size_tr = Math.min(new_tr_x - bl_x, bl_y - new_tr_y);
            newRect.x = bl_x;
            newRect.y = bl_y - new_size_tr;
            newRect.size = new_size_tr;
            break;
          case 2:
            let tl_x = resizeStart.rect.x;
            let tl_y = resizeStart.rect.y;
            let new_br_x = Math.max(tl_x + 32, Math.min(image.width, resizeStart.rect.x + resizeStart.rect.size + dx));
            let new_br_y = Math.max(tl_y + 32, Math.min(image.height, resizeStart.rect.y + resizeStart.rect.size + dy));
            let new_size_br = Math.min(new_br_x - tl_x, new_br_y - tl_y);
            newRect.x = tl_x;
            newRect.y = tl_y;
            newRect.size = new_size_br;
            break;
          case 3:
            let tr_x = resizeStart.rect.x + resizeStart.rect.size;
            let tr_y = resizeStart.rect.y;
            let new_bl_x = Math.min(tr_x - 32, Math.max(0, resizeStart.rect.x + dx));
            let new_bl_y = Math.max(tr_y + 32, Math.min(image.height, resizeStart.rect.y + resizeStart.rect.size + dy));
            let new_size_bl = Math.min(tr_x - new_bl_x, new_bl_y - tr_y);
            newRect.x = tr_x - new_size_bl;
            newRect.y = tr_y;
            newRect.size = new_size_bl;
            break;
        }
        if (newRect.x < 0) {
          newRect.size -= -newRect.x;
          newRect.x = 0;
        }
        if (newRect.y < 0) {
          newRect.size -= -newRect.y;
          newRect.y = 0;
        }
        if (newRect.x + newRect.size > image.width) {
          newRect.size = image.width - newRect.x;
        }
        if (newRect.y + newRect.size > image.height) {
          newRect.size = image.height - newRect.y;
        }
        newRect.size = Math.max(32, newRect.size);
        cropRect.x = newRect.x;
        cropRect.y = newRect.y;
        cropRect.size = newRect.size;
        drawCrop();
      }
    };
    cropCanvas.onmouseup = function(e) { dragging = false; resizing = false; activeHandle = -1; e.preventDefault(); };
    cropCanvas.onmouseleave = function(e) { dragging = false; resizing = false; activeHandle = -1; e.preventDefault(); };

    cropBtn = document.createElement('button');
    cropBtn.type = 'button';
    cropBtn.id = 'cropBtn' + cropBtnId; // renamed id to start with cropBtn
    cropBtn.textContent = translations[currentLang].confirm;
    cropBtn.style.margin = '16px auto 0 auto';
    cropBtn.style.display = 'block';
    cropBtn.style.background = 'linear-gradient(90deg, #00b4d8 0%, #48cae4 100%)';
    cropBtn.style.color = '#fff';
    cropBtn.style.border = 'none';
    cropBtn.style.borderRadius = '8px';
    cropBtn.style.padding = '10px 28px';
    cropBtn.style.fontSize = '1.08em';
    cropBtn.style.fontWeight = '600';
    cropBtn.style.letterSpacing = '0.5px';
    cropBtn.style.boxShadow = '0 2px 8px rgba(0,180,216,0.13)';
    cropBtn.style.cursor = 'pointer';
    cropBtn.style.transition = 'background 0.2s, box-shadow 0.2s';
    cropBtn.onmouseover = function() {
      cropBtn.style.background = 'linear-gradient(90deg, #0096c7 0%, #48cae4 100%)';
      cropBtn.style.boxShadow = '0 4px 16px rgba(0,180,216,0.18)';
    };
    cropBtn.onmouseout = function() {
      cropBtn.style.background = 'linear-gradient(90deg, #00b4d8 0%, #48cae4 100%)';
      cropBtn.style.boxShadow = '0 2px 8px rgba(0,180,216,0.13)';
    };
    cropContainer.appendChild(cropBtn);

    cropBtn.onclick = function() {
      const tempCanvas = document.createElement('canvas');
      tempCanvas.width = cropRect.size;
      tempCanvas.height = cropRect.size;
      const tempCtx = tempCanvas.getContext('2d');
      tempCtx.drawImage(
        image,
        cropRect.x, cropRect.y, cropRect.size, cropRect.size,
        0, 0, cropRect.size, cropRect.size
      );
      tempCanvas.toBlob(function(blob) {
        const dt = new DataTransfer();
        const croppedFile = new File([blob], file.name, {type: file.type});
        dt.items.add(croppedFile);
        input.files = dt.files;
        const reader = new FileReader();
        reader.onload = function(e) {
          preview.src = e.target.result;
          preview.style.display = 'block';
          if (cropCanvas) cropCanvas.remove();
          cropCanvas = null;
          if (cropBtn) cropBtn.remove();
          cropBtn = null;
        };
        reader.readAsDataURL(croppedFile);
      }, file.type);
    };
  }

  function drawCrop() {
    cropCtx.clearRect(0, 0, cropCanvas.width, cropCanvas.height);
    cropCtx.globalAlpha = 1.0;
    cropCtx.drawImage(img, 0, 0);

    cropCtx.save();
    cropCtx.beginPath();
    cropCtx.rect(0, 0, cropCanvas.width, cropCanvas.height);
    cropCtx.rect(cropRect.x, cropRect.y, cropRect.size, cropRect.size);
    cropCtx.fillStyle = 'rgba(0,0,0,0.45)';
    cropCtx.fill('evenodd');
    cropCtx.restore();

    cropCtx.save();
    const minSide = cropRect.size;
    const dash = Math.max(4, Math.round(minSide * 0.025));
    cropCtx.setLineDash([dash, dash]);
    cropCtx.strokeStyle = '#00b4d8';
    cropCtx.lineWidth = cropBoxLineWidth;
    cropCtx.shadowColor = '#00b4d8';
    cropCtx.shadowBlur = 6;
    cropCtx.strokeRect(cropRect.x, cropRect.y, cropRect.size, cropRect.size);
    cropCtx.setLineDash([]);
    cropCtx.shadowBlur = 0;
    cropCtx.restore();

    const handles = [
      [cropRect.x, cropRect.y],
      [cropRect.x + cropRect.size, cropRect.y],
      [cropRect.x + cropRect.size, cropRect.y + cropRect.size],
      [cropRect.x, cropRect.y + cropRect.size]
    ];
    cropCtx.save();
    for (let i = 0; i < 4; ++i) {
      cropCtx.beginPath();
      cropCtx.arc(handles[i][0], handles[i][1], dynamicHandleSize, 0, 2 * Math.PI);
      cropCtx.fillStyle = '#fff';
      cropCtx.fill();
      cropCtx.lineWidth = 2.5;
      cropCtx.strokeStyle = '#00b4d8';
      cropCtx.stroke();
    }
    cropCtx.restore();
  }

  input.addEventListener('change', function(event) {
    const file = event.target.files[0];
    imgFile = file;
    if (!file) {
      preview.src = '';
      preview.style.display = 'none';
      if (cropBtn) cropBtn.remove();
      cropBtn = null;
      if (cropCanvas) cropCanvas.remove();
      cropCanvas = null;
      return;
    }
    const reader = new FileReader();
    reader.onload = function(e) {
      preview.src = e.target.result;
      preview.style.display = 'block';
      img = new window.Image();
      img.onload = function() {
        if (img.width !== img.height) {
          showCropCanvas(img, file);
        } else {
          if (cropBtn) cropBtn.remove();
          cropBtn = null;
          if (cropCanvas) cropCanvas.remove();
          cropCanvas = null;
        }
      };
      img.src = e.target.result;
    };
    reader.readAsDataURL(file);
  });
}

createCropper('imageInput', 'imagePreview', 'Totem', 'totem.png', 'imageCropContainer');
createCropper('iconInput', 'iconPreview', 'Icon', 'pack_icon.png', 'iconCropContainer');