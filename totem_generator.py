from flask import Flask, request, send_file, render_template
from zipfile import ZipFile
from PIL import Image
from io import BytesIO
import os
import json
import uuid

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
app = Flask(__name__, template_folder=BASE_DIR)

@app.route('/')
def index():
    return render_template('totem_generator.html')

@app.route('/upload', methods=['POST'])
def upload():
    # Get uploaded images and pack name
    file = request.files.get('file')
    icon = request.files.get('icon')
    name = request.form.get('packName', "Xilillusion's Totem").strip()
    if not file:
        return "No file uploaded", 400

    # Sanitize pack name for filename
    safe_name = "".join(c if c.isalnum() or c in " _-.'" else "_" for c in name)
    if not safe_name:
        safe_name = "Xilillusion's Totem"
    mcpack_name = f"{safe_name}.mcpack"

    # Format: (file_object, filename)
    zip_files = []

    # Add image to textures/items/totem.png in the zip
    image_bytes = file.read()
    image = Image.open(BytesIO(image_bytes))
    # Convert to PNG if not already
    image_buffer = BytesIO()
    if image.format != "PNG":
        image = image.convert("RGBA")
    image.save(image_buffer, format="PNG")
    image_buffer.seek(0)

    zip_files.append((image_buffer, "textures/items/totem.png"))

    # Add icon to zip if provided
    if icon and icon.filename:
        icon_bytes = icon.read()
        icon_img = Image.open(BytesIO(icon_bytes))
        icon_buffer = BytesIO()
        # Convert to PNG if not already
        if icon_img.format != "PNG":
            icon_img = icon_img.convert("RGBA");
        icon_img.save(icon_buffer, format="PNG")
        icon_buffer.seek(0)

        zip_files.append((icon_buffer, "pack_icon.png"))

    # Add manifest.json to zip
    content = {
        "format_version": 2,
        "header": {
            "description": "Generated by §l§aXilillusion§l§f's Totem Maker",
            "name": name,
            "uuid": str(uuid.uuid4()),
            "version": [1, 0, 0],
            "min_engine_version": [1, 16, 0]
        },
        "modules": [
            {
                "description": "Generated by §l§aXilillusion§l§f's Totem Maker: https://github.com/Xilillusion/Minecraft-BE-Totem-Maker.git ",
                "type": "resources",
                "uuid": str(uuid.uuid4()),
                "version": [1, 0, 0]
            }
        ]
    }
    manifest_bytes = BytesIO(json.dumps(content, indent=2).encode("utf-8"));
    zip_files.append((manifest_bytes, "manifest.json"));

    # Create the .mcpack zip in memory
    zip_buffer = BytesIO()
    with ZipFile(zip_buffer, 'w') as zipf:
        for fileobj, arcname in zip_files:
            fileobj.seek(0)
            zipf.writestr(arcname, fileobj.read())
    zip_buffer.seek(0)

    # Return as a download
    return send_file(
        zip_buffer,
        mimetype='application/zip',
        as_attachment=True,
        download_name=mcpack_name
    )

if __name__ == '__main__':
    # Run the Flask app
    app.run(debug=True)
